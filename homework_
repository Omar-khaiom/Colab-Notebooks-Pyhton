{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1EDemO-7iH1A8X2RyrnDqvLxj2x8ClH6Z","timestamp":1677693655711},{"file_id":"1kboeXCSW6WGK9oMpgSY4wBjEKafLYcKp","timestamp":1677693637554}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["#class\n","class Stack:\n","    def __init__(self):\n","        self.data = []\n","        \n","    def size(self):\n","        return len(self.data)\n","    \n","    def isempty(self):\n","      if self.size()==0:\n","        return True\n","      else: \n","        return False  \n","\n","    def push(self, data):\n","        self.data.append(data)\n","        \n","    def pop(self):\n","      if self.isempty():\n","        print(\"Stack is empty\")\n","      else:\n","        self.data.pop()  \n","    \n","\n","    def peek(self):\n","      if self.isempty():\n","        print(\"Stack is empty\")\n","      else:\n","        return self.data[-1]  \n","        \n","\n","    def printStack(self):\n","       if self.isempty():\n","        print(\"Stack is empty\")\n","       else:\n","        print(self.data)"],"metadata":{"id":"-RDxKYyfEM_b"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Problem 4"],"metadata":{"id":"GUIOtpy-bGVy"}},{"cell_type":"code","source":["class Stack:\n","    def __init__(self):\n","        self.__data = []\n","    def size(self):\n","        return len(self.__data)\n","    def isempty(self):\n","        if self.size() == 0:\n","            return True\n","        else:\n","            return False\n","    def push(self, data):\n","        self.__data.append(data)\n","    def pop(self):\n","        if self.isempty():\n","            print(\"Stack is empty\")\n","        else:\n","            self.__data = self.__data[:-1]\n","    def peek(self):\n","        if self.isempty():\n","            print(\"Stack is empty\")\n","        else:\n","            return self.__data[-1]\n","    def printStack(self):\n","        if self.isempty():\n","            print(\"Stack is empty\")\n","        else:\n","            print(self.__data)\n","stack_1 = Stack()\n","stack_1.push(1)\n","stack_1.push(5)\n","stack_1.push(11)\n","stack_1.push(4)\n","stack_1.printStack()\n","\n","stack_2 = Stack()\n","stack_2.push(4)\n","stack_2.push(32)\n","stack_2.push(1)\n","stack_2.push(-1)\n","stack_2.printStack()\n","\n","def diff():\n","    sum_1 = 0\n","    sum_2 = 0\n","    if stack_1.isempty() or stack_2.isempty():\n","        print(\"One of the stacks is empty!!!\")\n","        return\n","    while not stack_1.isempty():\n","        temp = stack_1.peek()\n","        sum_1 += temp\n","        stack_1.pop()\n","    while not stack_2.isempty():\n","        temp = stack_2.peek()\n","        sum_2 += temp\n","        stack_2.pop()\n","    differ = sum_1 - sum_2\n","    if differ == 0:\n","        print(\"Stacks are already balanced\")\n","        stack_1.printStack()\n","        stack_2.printStack()\n","    elif differ > 0:\n","        stack_2.push(differ)\n","        print(\"Adding\", differ, \"to stack B\")\n","        stack_1.printStack()\n","        stack_2.printStack()\n","    else:\n","        stack_1.push(-differ)\n","        print(\"Adding\", -differ, \"to stack A\")\n","        stack_1.printStack()\n","        stack_2.printStack()\n","diff() "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"onxmL1-rbDss","executionInfo":{"status":"ok","timestamp":1677693481795,"user_tz":-360,"elapsed":493,"user":{"displayName":"Omar Khaiom","userId":"00167213879092111590"}},"outputId":"6fef918d-b2ef-445f-b663-1ed84409b67f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 5, 11, 4]\n","[4, 32, 1, -1]\n","Adding 15 to stack A\n","[15]\n","Stack is empty\n"]}]},{"cell_type":"code","source":["from collections import deque\n","\n","\n","class Queue:\n","    def __init__(self):\n","        self.__data = deque()\n","        \n","    def size(self):\n","        return len(self.__data)\n","\n","    def isempty(self):\n","      if self.size()==0:\n","        return True\n","      else: \n","        False \n","    \n","    def enqueue(self, data):\n","        self.__data.append(data)\n","\n","    def dequeue(self):\n","      if self.isempty():\n","        print(\"Queue is empty\")\n","      else:\n","        self.__data.popleft()\n","\n","    def peek(self):\n","      if self.isempty():\n","        print(\"Queue is empty\")\n","      else:\n","        return self.__data[0]      \n","\n","    def printQueue(self):\n","       if self.isempty():\n","        print(\"Queue is empty\")\n","       else:\n","        print(self.__data) "],"metadata":{"id":"-mXqZjJiU-FJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def reversequeue(array, k) :\n","    stack1 = Stack()\n","\n","    for i in range(k) :\n","        stack1.push(array.peek())\n","        array.dequeue()\n","\n","    while not stack1.isempty() :\n","        array.enqueue(stack1.peek())\n","        stack1.pop()\n","\n","    \n","\n","    array.printQueue()\n","\n","\n","\n","q = Queue()\n","q.enqueue(10)\n","q.enqueue(20)\n","q.enqueue(30)\n","q.enqueue(40)\n","q.enqueue(50)\n","q.enqueue(60)\n","q.enqueue(70)\n","q.enqueue(80)\n","q.enqueue(90)\n","print(\"Input:\")\n","q.printQueue()\n","print(\"Output: \")\n","reversequeue(q, 5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q_7p4QMMGXvr","executionInfo":{"status":"ok","timestamp":1677693548410,"user_tz":-360,"elapsed":4,"user":{"displayName":"Omar Khaiom","userId":"00167213879092111590"}},"outputId":"b0835bb5-48c4-4a8b-df22-b4707b96aed8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Input:\n","deque([10, 20, 30, 40, 50, 60, 70, 80, 90])\n","Output: \n","deque([60, 70, 80, 90, 50, 40, 30, 20, 10])\n"]}]},{"cell_type":"code","source":["def convert_binary (num):\n","    q = Queue()\n","   \n","          \n","    for i in range(1, num+1) :\n","        s = Stack()  \n","        decimal = i\n","        \n","        while decimal != 0:\n","          bit = decimal % 2\n","          decimal = decimal // 2\n","          s.push(bit)\n","\n","        result = \"\"\n","        while not s.isempty(): \n","          bit = s.peek()\n","          s.pop()\n","          result = result +str(bit)\n","        q.enqueue(result) \n","        \n","    while not q.isempty() :\n","            print(q.peek())\n","            q.dequeue()\n","        \n","        \n","\n","n = int(input(\"Enter the number: \"))\n","print(f\"Binary number from 1 to {n}: \")\n","convert_binary (n)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kfVpGm4LGgtz","executionInfo":{"status":"ok","timestamp":1677693579312,"user_tz":-360,"elapsed":4400,"user":{"displayName":"Omar Khaiom","userId":"00167213879092111590"}},"outputId":"7f1afda5-b6e0-4b6f-9070-c726b42e501b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number: 5\n","Binary number from 1 to 5: \n","1\n","10\n","11\n","100\n","101\n"]}]},{"cell_type":"code","source":["class Queue:\n","    def __init__(self):\n","        self.items = []\n","\n","    def enqueue(self, item):\n","        self.items.append(item)\n","\n","    def dequeue(self):\n","        return self.items.pop(0)\n","\n","    def is_empty(self):\n","        return len(self.items) == 0\n","\n","    def peek(self):\n","        return self.items[0]\n","\n","    def size(self):\n","        return len(self.items)\n","\n","\n","class myStack:\n","    def __init__(self):\n","        self.queue1 = Queue()\n","        self.queue2 = Queue()\n","\n","    def push(self, item):\n","        self.queue2.enqueue(item)\n","        while not self.queue1.is_empty():\n","            self.queue2.enqueue(self.queue1.dequeue())\n","        self.queue1, self.queue2 = self.queue2, self.queue1\n","\n","    def pop(self):\n","        return self.queue1.dequeue()\n","\n","    def is_empty(self):\n","        return self.queue1.is_empty()\n","\n","    def peek(self):\n","        return self.queue1.peek()\n","\n","    def size(self):\n","        return self.queue1.size()\n","\n","s = myStack()\n","s.push(20)\n","s.push(30)\n","s.push(40)\n","print(s.pop())    \n","print(s.peek())   \n","print(s.size())   "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FTFRkVwMYFBb","executionInfo":{"status":"ok","timestamp":1677693595905,"user_tz":-360,"elapsed":574,"user":{"displayName":"Omar Khaiom","userId":"00167213879092111590"}},"outputId":"1bcc8cb8-846c-440f-c78f-b3dd72b91271"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["40\n","30\n","2\n"]}]},{"cell_type":"code","source":["class stack:\n","    def daily_Temperatures(self, temperatures):\n","        temp = []\n","        answer = [0] * len(temperatures)\n","        for i in range(len(temperatures)):\n","            while temp and temperatures[i] > temperatures[temp[-1]]:\n","                j = temp.pop()\n","                answer[j] = i - j\n","            temp.append(i)\n","        return answer\n","\n","if __name__ == \"__main__\":\n","    s = stack()\n","    \n","    temperatures1 = [73, 74, 75, 71, 69, 72, 76, 73]\n","    output1 = s.dailyTemperatures(temperatures1)\n","    print(output1)\n","    temperatures2 = [30, 40, 50, 60]\n","    output2 = s.daily_Temperatures(temperatures2)\n","    print(output2)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":235},"id":"Sj4cgQ1ILNBT","executionInfo":{"status":"error","timestamp":1677693600716,"user_tz":-360,"elapsed":472,"user":{"displayName":"Omar Khaiom","userId":"00167213879092111590"}},"outputId":"e5f34843-89c7-470d-c02a-cbe03b68fe13"},"execution_count":null,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-a8fa88bf69be>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m     \u001b[0mtemperatures1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m73\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m74\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m75\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m71\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m69\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m72\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m76\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m73\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m     \u001b[0moutput1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdailyTemperatures\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtemperatures1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0mtemperatures2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m30\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m40\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m60\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'stack' object has no attribute 'dailyTemperatures'"]}]}]}